# -*- coding: utf-8 -*-
"""OgrenciBasarisi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J4XMOZcNo_AFwrK5g5AIZq7koOXZn4Gl
"""

#drivea eriştik
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

dosya_yolu= '/content/drive/MyDrive/Veri Setleri/original_data.csv'

df=pd.read_csv(dosya_yolu)
#ana veri seti bozulmasın diye kopyaladık
df_intAll=df.copy()

"""**1)VERİ SETİMİZİ TANIYALIM**"""

df.head(5)

df_intAll = df_intAll.drop(columns=['Unnamed: 0'])

df_intAll.info()

df.describe().T

"""#Sütunun içeriğine bakmak için kullandık.
sütunun_adı = 'studytime'
benzersiz_değerler = df[sütunun_adı].unique()
print(f"{sütunun_adı} sütununun benzersiz değerleri: {benzersiz_değerler}")

Veri setimizi ileride algoritmalarda çalıştırabilmek adına hepsini Encoder kullanmadan numeric hale çeviriyoruz.Çünkü sunum yaparken hangi sayının neyi temsil ettiğini sizlere göstermek istedik.:
"""

'''# 'school' sütununu dönüştür (1:GP , 0:MS)
df_intAll['school'] = df_intAll['school'].replace({'GP': 1, 'MS': 0}).astype(int)

# 'sex' sütununu dönüştür (1:Erkek , 0:Kadın)
df_intAll['sex'] = df_intAll['sex'].replace({'M': 1, 'F': 0}).astype(int)

# 'address' sütununu dönüştür (1=Şehir, 0=Kırsal)
df_intAll['address'] = df_intAll['address'].replace({'U': 1, 'R': 0}).astype(int)

# 'famsize' sütununu dönüştür (1=Aile sayısı >3, 0= Aile sayısı<=3)
df_intAll['famsize'] = df_intAll['famsize'].replace({'GT3': 1, 'LE3': 0}).astype(int)

# 'Pstatus' sütununu dönüştür (1:T(ailesi birlikte yaşıyor , 0:A(ailesi ayrı yaşıyor)) )
df_intAll['Pstatus'] = df_intAll['Pstatus'].replace({'T': 1, 'A': 0}).astype(int)

# 'Mjob' sütununu dönüştür (0:at_home, 1:services, 2:health, 3:teacher, 4:other)
df_intAll['Mjob'] = df_intAll['Mjob'].replace({'teacher': 3, 'other': 4, 'services': 1, 'health': 2, 'at_home': 0}).astype(int)

# 'Fjob' sütununu dönüştür (0:at_home, 1:services, 2:health, 3:teacher, 4:other)
df_intAll['Fjob'] = df_intAll['Fjob'].replace({'teacher': 3, 'other': 4, 'services': 1, 'health': 2, 'at_home': 0}).astype(int)

# 'Reason' sütununu dönüştür (0:at_home, 1:services, 2:health, 3:teacher, 4:other)
df_intAll['reason'] = df_intAll['reason'].replace({'course': 3, 'other': 0, 'reputation': 1,'home': 2}).astype(int)

# 'Guardian' sütununu dönüştür (0:mother ,1:father,2:other)
df_intAll['guardian'] = df_intAll['guardian'].replace({ 'mother': 0, 'father': 1,'other': 2}).astype(int)

# 'schoolsup' sütununu dönüştür (1:yes , 0:no)
df_intAll['schoolsup'] = df_intAll['schoolsup'].replace({'yes': 1, 'no': 0}).astype(int)

# 'famsup' sütununu dönüştür (1:yes , 0:no)
df_intAll['famsup'] = df_intAll['famsup'].replace({'yes': 1, 'no': 0}).astype(int)

# 'paid' sütununu dönüştür (1:yes , 0:no)
df_intAll['paid'] = df_intAll['paid'].replace({'yes': 1, 'no': 0}).astype(int)

# 'activities' sütununu dönüştür (1:yes , 0:no)
df_intAll['activities'] = df_intAll['activities'].replace({'yes': 1, 'no': 0}).astype(int)

# 'nursery' sütununu dönüştür (1:yes , 0:no)
df_intAll['nursery'] = df_intAll['nursery'].replace({'yes': 1, 'no': 0}).astype(int)

# 'higher' sütununu dönüştür (1:yes , 0:no)
df_intAll['higher'] = df_intAll['higher'].replace({'yes': 1, 'no': 0}).astype(int)

# 'internet' sütununu dönüştür (1:yes , 0:no)
df_intAll['internet'] = df_intAll['internet'].replace({'yes': 1, 'no': 0}).astype(int)

# 'romantic' sütununu dönüştür (1:yes , 0:no)
df_intAll['romantic'] = df_intAll['romantic'].replace({'yes': 1, 'no': 0}).astype(int)

# 'subject' sütununu dönüştür (1:Matematik , 0:Portekizce)
df_intAll['subject'] = df_intAll['subject'].replace({'Maths': 1, 'Portuguese': 0}).astype(int)

# 'Pass' sütununu dönüştür (1:True , 0:False)
df_intAll['Pass'] = df_intAll['Pass'].replace({'True': 1, 'False': 0}).astype(int)'''

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

# Kategorik sütunları dönüştür
categorical_columns = ['school', 'sex', 'address', 'famsize', 'Pstatus', 'Mjob', 'Fjob',
                       'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities',
                       'nursery', 'higher', 'internet', 'romantic', 'subject', 'Pass']

for column in categorical_columns:
    df_intAll[column] = label_encoder.fit_transform(df_intAll[column])
    # Her sütun için etiketleri ve ilişkili sınıfları yazdır
    print(f"{column}: {dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))}")

weights = {'g1': 0.3, 'g2': 0.3, 'g3': 0.4}

# Ağırlıklı ortalama hesaplaması
weighted_avg = (df_intAll['G1'] * weights['g1'] +
                df_intAll['G2'] * weights['g2'] +
                df_intAll['G3'] * weights['g3'])

# Yeni sütunu DataFrame'e ekleyelim
df_intAll['AVG'] = weighted_avg

df_math = df_intAll[df_intAll['subject'] == 1]
df_por = df_intAll[df_intAll['subject'] == 0]

"""Oluşturacağımız algoritmamızda Bağlımlı değişkeni tek tutmak adına ağırlıklı ortalama kullanarak "AVG" yani sınavların ortalamasını hesapladık.

**VERİ ÖN İŞLEME ADIMLARI 4 TANEDİR:**

* Veri Temizleme:Veri Setimizde verilerimiz eksiksiz ve doğru olduğu için bu adımda birşey yapmadık.

* Veri Birleştirme:İleride algoritmalarımızda kullanmak amacıyla üç adet sınavın ortalamasını alarak AVG adlı bir sütun oluşturarak bu değerleri oraya ekledik.

* Veri Dönüştürme:Veri setimizdeki çoğu değerlerimiz int türünde değildi ve bu da algoritma çalıştırmamızda sorun yaratıyordu.İnt olmayan değerlerimizi int türüne çevirdik.

* Veri İndirgeme:Şimdilik veri setimizi incelediğimizde gereksiz verilere rastlamadığımız için bu adımı geçtik.  



Ekstra olarak ileride kullanmak amacıyla iki tane dersimiz olan Matematik ve Portekizce derslerini iki ayrı veri setine kopyaladık.(df_math,df_por)
"""

df_intAll.info()

age_counts = df['age'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(age_counts, labels=age_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Yaşlara Göre Öğrenci Dağılımı')
plt.axis('equal')

plt.show()

maths_pass_rates = []
for i in range(1, 4):
    maths_pass_count = df[(df['subject'] == 'Maths') & (df['Pass'] == True) & (df['studytime'] == i)].shape[0]
    total_maths_students = df[(df['subject'] == 'Maths') & (df['studytime'] == i)].shape[0]
    maths_pass_percentage = (maths_pass_count / total_maths_students) * 100 if total_maths_students != 0 else 0
    maths_pass_rates.append(maths_pass_percentage)

portuguese_pass_rates = []
for i in range(1, 4):
    portuguese_pass_count = df[(df['subject'] == 'Portuguese') & (df['Pass'] == True) & (df['studytime'] == i)].shape[0]
    total_portuguese_students = df[(df['subject'] == 'Portuguese') & (df['studytime'] == i)].shape[0]
    portuguese_pass_percentage = (portuguese_pass_count / total_portuguese_students) * 100 if total_portuguese_students != 0 else 0
    portuguese_pass_rates.append(portuguese_pass_percentage)


plt.figure(figsize=(10, 6))

plt.plot(range(1, 4), maths_pass_rates, marker='o', label='Matematik')
plt.plot(range(1, 4), portuguese_pass_rates, marker='o', label='Portekizce')

plt.xlabel('Study Time')
plt.ylabel('Geçen Öğrenci Oranı (%)')
plt.title('Çalışma Saatlerine Göre Derslerde Geçenlerin Oranı')

plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""Yukarıdaki grafiğimizde Matematik ve Portekizce derslerinde 1,2,3 çalışan öğrencilerin yüzde kaçının dersten geçtiğini görüyoruz.





"""

pass_counts = df[df['Pass'] == True].groupby(['subject', 'sex']).size().unstack(fill_value=0)

fail_counts = df[df['Pass'] == False].groupby(['subject', 'sex']).size().unstack(fill_value=0)

y_limit = max(pass_counts.max().max(), fail_counts.max().max())

plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
pass_counts.plot(kind='bar', color=['skyblue', 'lightgreen'], ax=plt.gca())
plt.xlabel('Ders')
plt.ylabel('Öğrenci Sayısı')
plt.title('Dersleri Geçen Öğrencilerin Cinsiyete Göre Dağılımı')
plt.legend(title='Cinsiyet', loc='upper right')
plt.xticks(rotation=0)
plt.ylim(0, y_limit)
plt.grid(axis='y')

plt.subplot(1, 2, 2)
fail_counts.plot(kind='bar', color=['darkblue', 'darkgreen'], ax=plt.gca())
plt.xlabel('Ders')
plt.ylabel('Öğrenci Sayısı')
plt.title('Dersleri Geçemeyen Öğrencilerin Cinsiyete Göre Dağılımı')
plt.legend(title='Cinsiyet', loc='upper right')
plt.xticks(rotation=0)
plt.ylim(0, y_limit)
plt.grid(axis='y')

plt.tight_layout()
plt.show()

"""Yukarıdaki grafiklerimizde derslerden geçen ve geçemeyen öğrencilerin cinsiyet dağılımları ve sayıları belirtilmiştir."""

pass_counts = df[df['Pass'] == True]['reason'].value_counts()
fail_counts = df[df['Pass'] == False]['reason'].value_counts()

plt.figure(figsize=(10, 6))

pass_counts.plot(kind='bar', color='lightgreen', label='Pass')


fail_counts.plot(kind='bar', color='lightcoral', label='Fail', bottom=pass_counts)


plt.ylabel('Öğrenci Sayısı')
plt.title('Reason Kategorilerine Göre Geçen ve Geçmeyen Öğrenci Sayıları')
plt.legend()
plt.xticks(rotation=45)
plt.grid(axis='y')

plt.tight_layout()
plt.show()

"""Yukarıdaki grafiğimizde "reason" yani okulu seçme sebeplerine göre derslerden geçen ve kalan öğrencilerin sayısını görüyoruz."""

ortalama_dalc = df.groupby('age')['Dalc'].mean()


ortalama_dalc.plot(kind='bar', color='skyblue')
plt.xlabel('Yaş')
plt.ylabel('Ortalama Hafta içi Alkol Tüketimi')
plt.title('Yaşa Göre Ortalama Hafta içi Alkol Tüketimi')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

"""Yukarıdaki grafiğimizde Yaşlara göre hafta içi ortalama alkol tüketim sayılarını görüyoruz."""

import matplotlib.pyplot as plt

grouped_fjob = df.groupby('Fjob').size()

grouped_mjob = df.groupby('Mjob').size()

colors = plt.cm.tab10.colors

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))

grouped_fjob.plot(kind='bar', color=colors, ax=axes[0])
axes[0].set_title('Baba Mesleği Kategorileri')
axes[0].set_xlabel('Baba Mesleği')
axes[0].set_ylabel('Sayı')
axes[0].tick_params(axis='x', rotation=45)

grouped_mjob.plot(kind='bar', color=colors, ax=axes[1])
axes[1].set_title('Anne Mesleği Kategorileri')
axes[1].set_xlabel('Anne Mesleği')
axes[1].set_ylabel('Sayı')
axes[1].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()

Fedu_stats = df['Fedu'].value_counts()

Medu_stats = df['Medu'].value_counts()

plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
Fedu_stats.plot(kind='bar', color='skyblue')
plt.title('Baba Eğitim Seviyesi')
plt.xlabel('Eğitim Seviyesi')
plt.ylabel('Sayı')
plt.xticks(rotation=60)

plt.subplot(1, 2, 2)
Medu_stats.plot(kind='bar', color='lightgreen')
plt.title('Anne Eğitim Seviyesi')
plt.xlabel('Eğitim Seviyesi')
plt.ylabel('Sayı')
plt.xticks(rotation=60)

plt.tight_layout()
plt.show()

"""YUKARIDA VERI GORSELLESTIRME ADIMLARIMIZI TAMAMLADIK

**2)ALGORİTMALARI TASARLAMAYA BAŞLIYORUZ**

Genel ve belirli featurelarda olmak üzere iki türlü makine öğrenimi algoritmalarımızı kullanmak istiyoruz.Belirli featurlarımızda aşşağıda belirttiğimiz üzere 3 çeşit olacaktır.(fam=aile içi etkilerin olduğu özellikler,soche=sosyal ve sağlık etkilerinin olduğu özellikler,
eco=ekonomik etkilerin olduğu özellikler) Ve bu featurlarımızı hem genel olarak hem de iki dersimiz için ayrı ayrı accuracy oranlarına bakacağız.Her featurelarımız için SVC,RandomForestClassifier ve Logistic Regresyon modellerini kullanacağız.
"""

fam_features = ['famrel', 'Fjob', 'Mjob', 'famsize',"Medu","Fedu",'Pstatus','guardian']
soche_features = ['romantic', 'Dalc', 'Walc', 'health', 'absences', 'goout']
eco_features = ['internet', 'Fjob', 'Mjob', 'famsize',"Medu","Fedu",'traveltime','reason','paid','Parents_edu']

"""*2.1)Random Forest Algoritmasını kullanarak Dersten geçmeyi tahminliyoruz.*"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

target=("Pass")

X = df_intAll[fam_features]
y = df_intAll[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

rf_classifier.fit(X_train, y_train)


y_pred = rf_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Random Forest Aile içi özelliklerin Pass'e etkisi:")
print("--------------------------------------")
print("Genel Accuracy:", accuracy)


X_math = df_math[fam_features]
y_math = df_math[target]

X_train_math, X_test_math, y_train_math, y_test_math = train_test_split(X_math, y_math, test_size=0.2, random_state=42)

rf_classifier_math = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier_math.fit(X_train_math, y_train_math)

y_pred_math = rf_classifier_math.predict(X_test_math)
accuracy_math = accuracy_score(y_test_math, y_pred_math)
print("Maths Accuracy:", accuracy_math)


X_portuguese = df_por[fam_features]
y_portuguese = df_por[target]

X_train_port, X_test_port, y_train_port, y_test_port = train_test_split(X_portuguese, y_portuguese, test_size=0.2,random_state=42)

rf_classifier_port = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier_port.fit(X_train_port, y_train_port)

y_pred_port = rf_classifier_port.predict(X_test_port)
accuracy_port = accuracy_score(y_test_port, y_pred_port)
print("Portuguese Accuracy:", accuracy_port)

"""Yukarıda aile içi özelliklerin dersleri geçme üzerindeki tahminlemedeki başarı oranını görüyoruz.Ayrıca iki ayrı ders için ayrı ayrı bu algoritmamızdaki başarı oranlarına baktık.Matematik dersi için aile için etkinin algoritmamızda Portekizce dersine göre başarısı daha yüksek olduğunu gördük."""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

target=("Pass")

X = df_intAll[eco_features]
y = df_intAll[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

rf_classifier.fit(X_train, y_train)


y_pred = rf_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Random Forest Ekonomik  özelliklerin Pass'e etkisi:")
print("--------------------------------------")
print("Genel Accuracy:", accuracy)

X_math = df_math[eco_features]
y_math = df_math[target]

X_train_math, X_test_math, y_train_math, y_test_math = train_test_split(X_math, y_math, test_size=0.2, random_state=42)

rf_classifier_math = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier_math.fit(X_train_math, y_train_math)

y_pred_math = rf_classifier_math.predict(X_test_math)
accuracy_math = accuracy_score(y_test_math, y_pred_math)
print("Maths Accuracy:", accuracy_math)


X_portuguese = df_por[eco_features]
y_portuguese = df_por[target]

X_train_port, X_test_port, y_train_port, y_test_port = train_test_split(X_portuguese, y_portuguese, test_size=0.2,random_state=42)

rf_classifier_port = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier_port.fit(X_train_port, y_train_port)

y_pred_port = rf_classifier_port.predict(X_test_port)
accuracy_port = accuracy_score(y_test_port, y_pred_port)
print("Portuguese Accuracy:", accuracy_port)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

target=("Pass")

X = df_intAll[soche_features]
y = df_intAll[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

rf_classifier.fit(X_train, y_train)


y_pred = rf_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Random Forest Sağlık ve Sosyal özelliklerin Pass'e etkisi:")
print("--------------------------------------")
print("Genel Accuracy:", accuracy)
X_math = df_math[soche_features]
y_math = df_math[target]


rf_classifier_math = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier_math.fit(X_train_math, y_train_math)

y_pred_math = rf_classifier_math.predict(X_test_math)
accuracy_math = accuracy_score(y_test_math, y_pred_math)
print("Maths Accuracy:", accuracy_math)


X_portuguese = df_por[soche_features]
y_portuguese = df_por[target]

X_train_port, X_test_port, y_train_port, y_test_port = train_test_split(X_portuguese, y_portuguese, test_size=0.2,random_state=42)

rf_classifier_port = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier_port.fit(X_train_port, y_train_port)

y_pred_port = rf_classifier_port.predict(X_test_port)
accuracy_port = accuracy_score(y_test_port, y_pred_port)
print("Portuguese Accuracy:", accuracy_port)

"""*2.2)Logistic R. Algoritmasını kullanarak Dersten geçmeyi tahminliyoruz.*"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

target=("Pass")

X = df_intAll[soche_features]
y = df_intAll[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

modellr = LogisticRegression(solver="liblinear")


modellr.fit(X_train, y_train)


y_pred = modellr.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Lojistik Sağlık ve Sosyal özelliklerin Pass'e etkisi:")
print("--------------------------------------")
print("Genel Accuracy:", accuracy)
X_math = df_math[soche_features]
y_math = df_math[target]

X_train_math, X_test_math, y_train_math, y_test_math = train_test_split(X_math, y_math, test_size=0.2, random_state=42)


lr_math =LogisticRegression(solver="liblinear")

lr_math.fit(X_train_math, y_train_math)

y_pred_math = lr_math.predict(X_test_math)
accuracy_math = accuracy_score(y_test_math, y_pred_math)
print("Maths Accuracy:", accuracy_math)


X_portuguese = df_por[soche_features]
y_portuguese = df_por[target]

X_train_port, X_test_port, y_train_port, y_test_port = train_test_split(X_portuguese, y_portuguese, test_size=0.2,random_state=42)

lr_port = LogisticRegression(solver="liblinear")

lr_port.fit(X_train_port, y_train_port)

y_pred_port = lr_port.predict(X_test_port)
accuracy_port = accuracy_score(y_test_port, y_pred_port)
print("Portuguese Accuracy:", accuracy_port)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

target=("Pass")

X = df_intAll[eco_features]
y = df_intAll[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

modellre = LogisticRegression(solver="liblinear")


modellre.fit(X_train, y_train)


y_pred = modellre.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Lojistik Sağlık ve Sosyal özelliklerin Pass'e etkisi:")
print("--------------------------------------")
print("Genel Accuracy:", accuracy)

X_math = df_math[eco_features]
y_math = df_math[target]

X_train_math, X_test_math, y_train_math, y_test_math = train_test_split(X_math, y_math, test_size=0.2, random_state=42)
lr_matheco =LogisticRegression(solver="liblinear")

lr_matheco.fit(X_train_math, y_train_math)

y_pred_math = lr_matheco.predict(X_test_math)
accuracy_math = accuracy_score(y_test_math, y_pred_math)
print("Maths Accuracy:", accuracy_math)


X_portuguese = df_por[eco_features]
y_portuguese = df_por[target]

X_train_port, X_test_port, y_train_port, y_test_port = train_test_split(X_portuguese, y_portuguese, test_size=0.2,random_state=42)

lr_poreco = LogisticRegression(solver="liblinear")

lr_poreco.fit(X_train_port, y_train_port)

y_pred_port = lr_poreco.predict(X_test_port)
accuracy_port = accuracy_score(y_test_port, y_pred_port)
print("Portuguese Accuracy:", accuracy_port)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

target=("Pass")

X = df_intAll[fam_features]
y = df_intAll[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lrfam = LogisticRegression(solver="liblinear")


lrfam.fit(X_train, y_train)


y_pred = lrfam.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Lojistik Sağlık ve Sosyal özelliklerin Pass'e etkisi:")
print("--------------------------------------")
print("Genel Accuracy:", accuracy)

X_math = df_math[fam_features]
y_math = df_math[target]

X_train_math, X_test_math, y_train_math, y_test_math = train_test_split(X_math, y_math, test_size=0.2, random_state=42)

lr_mathfam =LogisticRegression(solver="liblinear")

lr_mathfam.fit(X_train_math, y_train_math)

y_pred_math = lr_mathfam.predict(X_test_math)
accuracy_math = accuracy_score(y_test_math, y_pred_math)
print("Maths Accuracy:", accuracy_math)


X_portuguese = df_por[fam_features]
y_portuguese = df_por[target]

X_train_port, X_test_port, y_train_port, y_test_port = train_test_split(X_portuguese, y_portuguese, test_size=0.2,random_state=42)

lr_porfam = LogisticRegression(solver="liblinear")

lr_porfam.fit(X_train_port, y_train_port)

y_pred_port = lr_porfam.predict(X_test_port)
accuracy_port = accuracy_score(y_test_port, y_pred_port)
print("Portuguese Accuracy:", accuracy_port)

"""*2.3) SVC ile Classifier Algoritmasını kullanarak dersten geçmeyi tahminliyoruz.*

> Blok alıntı ekle


"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC


target=("Pass")

X = df_intAll[fam_features]
y = df_intAll[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_classifier = SVC(kernel='linear')


rf_classifier.fit(X_train, y_train)


y_pred = rf_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Lojistik Sağlık ve Sosyal özelliklerin Pass'e etkisi:")
print("--------------------------------------")
print("Genel Accuracy:", accuracy)

X_math = df_math[fam_features]
y_math = df_math[target]

X_train_math, X_test_math, y_train_math, y_test_math = train_test_split(X_math, y_math, test_size=0.2, random_state=42)

rf_classifier_math =SVC(kernel='linear')

rf_classifier_math.fit(X_train_math, y_train_math)

y_pred_math = rf_classifier_math.predict(X_test_math)
accuracy_math = accuracy_score(y_test_math, y_pred_math)
print("Maths Accuracy:", accuracy_math)


X_portuguese = df_por[fam_features]
y_portuguese = df_por[target]

X_train_port, X_test_port, y_train_port, y_test_port = train_test_split(X_portuguese, y_portuguese, test_size=0.2,random_state=42)

rf_classifier_port = SVC(kernel='linear')

rf_classifier_port.fit(X_train_port, y_train_port)

y_pred_port = rf_classifier_port.predict(X_test_port)
accuracy_port = accuracy_score(y_test_port, y_pred_port)
print("Portuguese Accuracy:", accuracy_port)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC


target=("Pass")

X = df_intAll[eco_features]
y = df_intAll[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_classifier = SVC(kernel='linear')


rf_classifier.fit(X_train, y_train)


y_pred = rf_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Lojistik Sağlık ve Sosyal özelliklerin Pass'e etkisi:")
print("--------------------------------------")
print("Genel Accuracy:", accuracy)

X_math = df_math[eco_features]
y_math = df_math[target]

X_train_math, X_test_math, y_train_math, y_test_math = train_test_split(X_math, y_math, test_size=0.2, random_state=42)

rf_classifier_math =SVC(kernel='linear')

rf_classifier_math.fit(X_train_math, y_train_math)

y_pred_math = rf_classifier_math.predict(X_test_math)
accuracy_math = accuracy_score(y_test_math, y_pred_math)
print("Maths Accuracy:", accuracy_math)


X_portuguese = df_por[eco_features]
y_portuguese = df_por[target]

X_train_port, X_test_port, y_train_port, y_test_port = train_test_split(X_portuguese, y_portuguese, test_size=0.2,random_state=42)

rf_classifier_port = SVC(kernel='linear')

rf_classifier_port.fit(X_train_port, y_train_port)

y_pred_port = rf_classifier_port.predict(X_test_port)
accuracy_port = accuracy_score(y_test_port, y_pred_port)
print("Portuguese Accuracy:", accuracy_port)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC


target=("Pass")

X = df_intAll[soche_features]
y = df_intAll[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_classifier = SVC(kernel='linear')


rf_classifier.fit(X_train, y_train)


y_pred = rf_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Lojistik Sağlık ve Sosyal özelliklerin Pass'e etkisi:")
print("--------------------------------------")
print("Genel Accuracy:", accuracy)

X_math = df_math[soche_features]
y_math = df_math[target]

X_train_math, X_test_math, y_train_math, y_test_math = train_test_split(X_math, y_math, test_size=0.2, random_state=42)

rf_classifier_math =SVC(kernel='linear')

rf_classifier_math.fit(X_train_math, y_train_math)

y_pred_math = rf_classifier_math.predict(X_test_math)
accuracy_math = accuracy_score(y_test_math, y_pred_math)
print("Maths Accuracy:", accuracy_math)


X_portuguese = df_por[soche_features]
y_portuguese = df_por[target]

X_train_port, X_test_port, y_train_port, y_test_port = train_test_split(X_portuguese, y_portuguese, test_size=0.2,random_state=42)

rf_classifier_port = SVC(kernel='linear')

rf_classifier_port.fit(X_train_port, y_train_port)

y_pred_port = rf_classifier_port.predict(X_test_port)
accuracy_port = accuracy_score(y_test_port, y_pred_port)
print("Portuguese Accuracy:", accuracy_port)

"""Yukarıda görüldüğü üzere sağlık ve sosyal  özelliklerin dersleri geçme üzerindeki tahminlemedeki başarı oranı Portekizce dersinde Matematik dersinden daha yüksektir."""

import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from xgboost import plot_importance
from sklearn.metrics import accuracy_score



# Veri kümesi
X = df_intAll.drop("G3", axis=1)
y = df_intAll["G2"]

# Veriyi eğitim ve test setlerine ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=8)

# XGBoost regresyon modeli oluşturma ve eğitme
model = xgb.XGBRegressor(
    objective='reg:squarederror', #amaç düşürülmek istenen hesaplama
    random_state=8,#hangi random stateten balıcak
    learning_rate=0.02,#öğrenme oranı 1 olursa overiftting ihtimali artar bir önceki aaçtan aynısı yapmaya çalışcağı için ve düzgün öğrenme olmaz
    max_depth=2,#max derinlik
    min_child_weight=1,#yaprakta oluşacak node sayısı
    subsample=0.71,#kullanılcak alt örnepin oranı
    colsample_bytree=0.8,#hangi özelleriklerin yüzdelik oalrak rastgele seçilip eğtimde kullanılması
    n_estimators=614,#oluşutrulcak ağaç sayısı
    early_stopping_rounds=2# early stoppingte 2 den fazla gelişme kaydetmmezse  model durur
)


#verbose eğitim sırasında çıktı vermeyi sağlar true ise
model.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=False)


y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Tahminler yapalım
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Train ve test setlerinde R-kare skorunu hesaplayalım
train_r2 = r2_score(y_train, y_pred_train)
test_r2 = r2_score(y_test, y_pred_test)

print("Train seti R-kare skoru:", train_r2)
print("Test seti R-kare skoru:", test_r2)
plot_importance(model, max_num_features=8) # top 8 most important features
plt.show()

#accuracy bak train test ayrı olarak bak.

!pip install scikit-optimize
#skoptu kullanmak için yükledik

import xgboost as xgb
from skopt import BayesSearchCV
from sklearn.metrics import mean_squared_error

# BayesSearchCV ile en optimize hyperparametre değerlerini bulduk
param_space = {
    'learning_rate': (0.01, 0.3, 'log-uniform'),
    'max_depth': (2, 10),
    'min_child_weight': (1, 10),
    'subsample': (0.1, 0.9),
    'colsample_bytree': (0.1, 0.9),
    'n_estimators': (100, 1000),

}


model = xgb.XGBRegressor(objective='reg:squarederror', random_state=42)

bayes_search = BayesSearchCV(estimator=model, search_spaces=param_space, n_iter=50, scoring='neg_mean_squared_error', cv=5, n_jobs=-1, verbose=2)#njob çalışan işlemci sayısı,cv cross validation test sayısı
bayes_search.fit(X, y)

print("En iyi parametreler:", bayes_search.best_params_)
print("En iyi skor (Negatif MSE):", bayes_search.best_score_)

# En iyi modeli kullanarak tahmin yapma altta çıkan değerleri yukardaki modelde değerleri parametleri öyle değiştirdik
best_model = bayes_search.best_estimator_
predictions = best_model.predict(X)

# Tahminlerin hata karesini hesaplama
mse = mean_squared_error(y, predictions)
print("Mean Squared Error:", mse)

def classify_avg(avg):
    if avg <= 5:
        return 0  # Kötü
    elif avg <= 10:
        return 1  # Orta
    elif avg <= 15:
        return 2  # İyi
    else:
        return 3  # Çok İyi

df_avggrup=df_intAll.copy()

df_avggrup['AVG_Category'] = df_avggrup['AVG'].apply(classify_avg)